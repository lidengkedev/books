<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>一个专注技术的组织</subtitle>
  <link href="https://lidengkedev.github.io/books/atom.xml" rel="self"/>
  
  <link href="https://lidengkedev.github.io/books/"/>
  <updated>2022-07-01T11:34:21.006Z</updated>
  <id>https://lidengkedev.github.io/books/</id>
  
  <author>
    <name>登峰人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>babel</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/babel/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/babel/</id>
    <published>2022-07-01T11:23:26.000Z</published>
    <updated>2022-07-01T11:34:21.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><ul><li><a href="https://babeljs.io/repl">在线ES6转ES5</a></li><li><a href="https://es6console.com/">在线Babel转译</a></li></ul><h2 id="es6-转-es5"><a href="#es6-转-es5" class="headerlink" title="es6 转 es5"></a>es6 转 es5</h2><blockquote><p>const</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">12</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">23</span>;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> _a = <span class="number">23</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> _a2 = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> _a3 = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>let</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">23</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">12</span>;</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">23</span>;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">34</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转换 es5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">23</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> _a = <span class="number">12</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> _a2 = <span class="number">23</span>;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> _a3 = <span class="number">34</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  _this.<span class="property">name</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child2&quot;</span>;</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child3&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;parent&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this2 = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      _this2.<span class="property">name</span> = <span class="string">&quot;parent&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this.<span class="property">name</span> = <span class="string">&quot;child2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      _this.<span class="property">name</span> = <span class="string">&quot;child3&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child2&quot;</span>;</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child3&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;parent&quot;</span>;</span><br><span class="line">      <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;child&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> _this = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  _this.<span class="property">name</span> = <span class="string">&quot;child2&quot;</span>;</span><br><span class="line"></span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this.<span class="property">name</span> = <span class="string">&quot;child3&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _this2 = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    _this2.<span class="property">name</span> = <span class="string">&quot;parent&quot;</span>;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      _this2.<span class="property">name</span> = <span class="string">&quot;child&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>符号转换</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;这是一句话&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> text2 = <span class="string">`这是另一句话<span class="subst">$&#123;text&#125;</span>`</span>;</span><br><span class="line"><span class="string">`&lt;div&gt;<span class="subst">$&#123;text2&#125;</span>&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;这是一句话&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> text2 = <span class="string">&quot;\u8FD9\u662F\u53E6\u4E00\u53E5\u8BDD&quot;</span>.<span class="title function_">concat</span>(text);</span><br><span class="line"><span class="string">&quot;&lt;div&gt;&quot;</span>.<span class="title function_">concat</span>(text2, <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>解构赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> new_arr = [...arr, <span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel 转 es5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">    b = <span class="number">2</span>,</span><br><span class="line">    c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> new_arr = [].<span class="title function_">concat</span>(arr, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;babel&quot;&gt;&lt;a href=&quot;#babel&quot; class=&quot;headerlink&quot; title=&quot;babel&quot;&gt;&lt;/a&gt;babel&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/repl&quot;&gt;在线ES6转ES5&lt;/a&gt;&lt;/li&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="babel" scheme="https://lidengkedev.github.io/books/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/html/index/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/html/index/</id>
    <published>2022-07-01T11:22:33.000Z</published>
    <updated>2022-07-01T11:36:35.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="Web标准和W3C"><a href="#Web标准和W3C" class="headerlink" title="Web标准和W3C"></a>Web标准和W3C</h2><blockquote><p> 标签闭合，标签小写，不乱嵌套，提高搜索机器人搜索几率，</p><p>使用外连接css和js脚本，结构行为表现的分离，</p></blockquote><ul><li>文件下载与页面速度更快，</li><li>内容能被更多的用户访问，</li><li>内容能被更广泛的设备所访问，</li><li>更少的代码和组件，</li><li>容易维护，</li><li>改版方便，</li><li>不需要变动页面内容，</li><li>提供打印版本而不需要复制内容，</li><li>提高网站易用性</li></ul><h3 id="Xhtml和html有什么区别？"><a href="#Xhtml和html有什么区别？" class="headerlink" title="Xhtml和html有什么区别？"></a>Xhtml和html有什么区别？</h3><ul><li>HTML是一种基于web网页设计语言，</li><li>XHTML是一个基于xml的置标语言</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;Web标准和W3C&quot;&gt;&lt;a href=&quot;#Web标准和W3C&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/categories/html/"/>
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/html/html5/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/html/html5/</id>
    <published>2022-07-01T11:21:17.000Z</published>
    <updated>2022-07-01T11:36:27.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="HTML5新增加的API"><a href="#HTML5新增加的API" class="headerlink" title="HTML5新增加的API"></a>HTML5新增加的API</h2><ol><li>用于即时2D绘图的Canvas标签</li><li>定时媒体回放</li><li>离线数据库存储</li><li>文档编辑</li><li>拖拽控制</li><li>浏览历史管理<br>…<h2 id="HTML5中新增的标签"><a href="#HTML5中新增的标签" class="headerlink" title="HTML5中新增的标签"></a>HTML5中新增的标签</h2></li><li>canvas</li><li>video,audio</li><li>artcle,footer,header,nav,section</li><li>calender,date,time,email,url,search</li><li>datalist(类似于select)</li></ol><h2 id="HTML5中被移除的标签"><a href="#HTML5中被移除的标签" class="headerlink" title="HTML5中被移除的标签"></a>HTML5中被移除的标签</h2><ol><li>u,font,center,strike</li></ol><h2 id="HTML5的两大特点"><a href="#HTML5的两大特点" class="headerlink" title="HTML5的两大特点"></a>HTML5的两大特点</h2><ol><li>强化了Web网页的表现性能，增加了可描绘二维图形以及视频和音频的标签。</li><li>添加了本地数据库等web应用的功能。</li></ol><h2 id="video视频"><a href="#video视频" class="headerlink" title="video视频"></a>video视频</h2><p>video目前支持三种视频格式：Ogg,MPEG4,WebM</p><ul><li>Ogg = 带有Theora视频编码和Vorbis视频编码的Ogg文件</li><li>MPEG4 = 带有H.264视频编码和Vorbis音频编码的MPEG4文件</li><li>WebM = 带有VP8视频和Vorbis音频编码的WebM文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/i/movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;/i/movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">Your brower does not stupport the video tag.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="video属性相关的"><a href="#video属性相关的" class="headerlink" title="video属性相关的"></a>video属性相关的</h2><div class="table-container"><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>视频就绪后立即播放</td></tr><tr><td>controls</td><td>controls</td><td>显示控件，比如播放按钮</td></tr><tr><td>height</td><td>pixels像素值</td><td>视频播放器的高度</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>preload</td><td>preload</td><td>视频在页面加载时进行加载并预备播放，如果使用autoplay，则此属性无效</td></tr><tr><td>src</td><td>url</td><td>播放视频是地址</td></tr><tr><td>width</td><td>pixels像素值</td><td>视频播放器的宽度</td></tr></tbody></table></div><h2 id="audio音频"><a href="#audio音频" class="headerlink" title="audio音频"></a>audio音频</h2><p>audio目前支持三种音频格式: Ogg Vorbis,MP3,Wav</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;/i/song.ogg&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;song.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;song.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the audio tag.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="audio属性相关"><a href="#audio属性相关" class="headerlink" title="audio属性相关"></a>audio属性相关</h2><div class="table-container"><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>autoplay</td><td>autoplay</td><td>音频就绪后立即播放</td></tr><tr><td>controls</td><td>controls</td><td>显示控件，比如播放按钮</td></tr><tr><td>loop</td><td>loop</td><td>循环播放</td></tr><tr><td>preload</td><td>preload</td><td>音频在页面加载时进行加载，并预备播放，如果使用“qutoplay”，则此属性无效</td></tr><tr><td>src</td><td>url</td><td>要播放的音频的URL</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;HTML5新增加的API&quot;&gt;&lt;a href=&quot;#HTML5新增加的API&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/categories/html/"/>
    
    
    <category term="html5" scheme="https://lidengkedev.github.io/books/tags/html5/"/>
    
    <category term="html" scheme="https://lidengkedev.github.io/books/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>字符集</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/html/character/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/html/character/</id>
    <published>2022-07-01T11:20:05.000Z</published>
    <updated>2022-07-01T11:36:17.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><table>    <thead>        <tr>            <th style="width: 50px">字符</th>            <th style="width: 150px">简称</th>            <th>描述</th>        <tr>    </thead>    <tbody>        <tr>            <td>&nbsp</td>            <td>不换行空格符</td>            <td>它叫不换行空格，全称No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触了 ，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。要使用html实体表示才可累加，该空格占据宽度受字体影响明显而强烈。</td>        </tr>        <tr>            <td>&ensp</td>            <td>半角空格符</td>            <td>它叫“半角空格”，全称是En Space，en是字体排印学的计量单位，为em宽度的一半。根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。此空格传承空格家族一贯的特性：透明的，此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。</td>        </tr>        <tr>            <td>&emsp</td>            <td>全角空格符</td>            <td>它叫“全角空格”，全称是Em Space，em是字体排印学的计量单位，相当于当前指定的点数。例如，1 em在16px的字体中就是16px。此空格也传承空格家族一贯的特性：透明的，此空格也有个相当稳健的特性，就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。</td>        </tr>        <tr>            <td>&thinsp</td>            <td>窄空格</td>            <td>它叫窄空格，全称是Thin Space。我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。它是em之六分之一宽。</td>        </tr>        <tr>            <td>&zwnj</td>            <td>零宽度不连字</td>            <td>它叫零宽不连字，全称是Zero Width Non Joiner，简称“ZWNJ”，是一个不打印字符，放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。Unicode中的零宽不连字字符映射为“”（zero width non-joiner，U+200C），HTML字符值引用为</td>        </tr>        <tr>            <td>&zwj</td>            <td>零宽度连字</td>            <td>它叫零宽连字，全称是Zero Width Joiner，简称“ZWJ”，是一个不打印字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，使得这两个本不会发生连字的字符产生了连字效果。零宽连字符的Unicode码位是U+200D (HTML: ‍ ‍）。</td>        </tr>        <tr>            <td>&gt</td>            <td>大于('>')</td>            <td></td>        </tr>        <tr>            <td>&lt</td>            <td>小于('<')</td>            <td></td>        </tr>        <tr>            <td>&times</td>            <td>('X')</td>            <td></td>        </tr>    </tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符集&quot;&gt;&lt;a href=&quot;#字符集&quot; class=&quot;headerlink&quot; title=&quot;字符集&quot;&gt;&lt;/a&gt;字符集&lt;/h1&gt;&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th style=&quot;width: 50px&quot;&gt;</summary>
      
    
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/categories/html/"/>
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/tags/html/"/>
    
    <category term="uncode" scheme="https://lidengkedev.github.io/books/tags/uncode/"/>
    
  </entry>
  
  <entry>
    <title>canvas 画布</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/html/canvas/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/html/canvas/</id>
    <published>2022-07-01T11:19:03.000Z</published>
    <updated>2022-07-01T11:36:09.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas画布"><a href="#canvas画布" class="headerlink" title="canvas画布"></a>canvas画布</h1><p>canvas元素用于在网页上绘制图形</p><p>HTML5的canvas元素使用javascript在网页上绘制图像，画布时一个矩形区域，可以控制其每一个像素。</p><p>canvas拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">Your browser does not support the canvas element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>绘制矩形</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取canvas元素</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建context对象</span></span><br><span class="line"><span class="keyword">var</span> cxt = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="comment">// 设置填充颜色为红色</span></span><br><span class="line">cxt.<span class="property">fillStyle</span> = <span class="string">&quot;#FF0000&quot;</span>;</span><br><span class="line"><span class="comment">// 绘画一个矩形</span></span><br><span class="line">cxt.<span class="title function_">dillRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><blockquote><p>绘制线段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cxt = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">cxt.<span class="title function_">moveTo</span>(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">cxt.<span class="title function_">lineTo</span>(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">cxt.<span class="title function_">lineTo</span>(<span class="number">10</span>,<span class="number">50</span>);</span><br><span class="line">cxt.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><blockquote><p>绘制圆</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cxt = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">cxt.<span class="property">fillStyle</span> = <span class="string">&quot;#FFF0000&quot;</span>;</span><br><span class="line">cxt.<span class="title function_">beginPath</span>();</span><br><span class="line">cxt.<span class="title function_">arc</span>(<span class="number">70</span>,<span class="number">18</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="title class_">Math</span>.<span class="property">PI</span>*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">cxt.<span class="title function_">closePath</span>();</span><br><span class="line">cxt.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><blockquote><p>横向渐变色（矩形）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cxt = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> grd = cxt.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">175</span>,<span class="number">50</span>);</span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;#FF0000&quot;</span>);</span><br><span class="line">grd.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;00FF00&quot;</span>);</span><br><span class="line">cxt.<span class="property">fillStyle</span> = grd;</span><br><span class="line">cxt.<span class="title function_">fillRect</span>();</span><br></pre></td></tr></table></figure><blockquote><p>添加图片</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cxt = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;flower.png&quot;</span>;</span><br><span class="line">cxt.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h4><pre><code>getContext(&#39;2d&#39;)moveTo(x,y)lineTo(x,y)beginPath()clip()fillText()fillStylefill()lineWidthstroke()strokeStylefillRect()fontsrc()textAlignlineCapclosePathstrokeRect()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;canvas画布&quot;&gt;&lt;a href=&quot;#canvas画布&quot; class=&quot;headerlink&quot; title=&quot;canvas画布&quot;&gt;&lt;/a&gt;canvas画布&lt;/h1&gt;&lt;p&gt;canvas元素用于在网页上绘制图形&lt;/p&gt;
&lt;p&gt;HTML5的canvas元素使用java</summary>
      
    
    
    
    <category term="html" scheme="https://lidengkedev.github.io/books/categories/html/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="html5" scheme="https://lidengkedev.github.io/books/tags/html5/"/>
    
    <category term="canvas" scheme="https://lidengkedev.github.io/books/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Window</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/window/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/window/</id>
    <published>2022-07-01T11:17:58.000Z</published>
    <updated>2022-07-01T11:35:59.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><blockquote><p>open</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url  新窗口请求地址</span></span><br><span class="line"><span class="comment">// name 新窗口名称</span></span><br><span class="line"><span class="comment">// params 新窗口样式</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(url, name, params);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://www.imooc.com&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;width=300, height=200, menubar=no, toolbar=no, status=no, scrollbars=yes&#x27;</span>)</span><br></pre></td></tr></table></figure><table>    <thead>        <tr>            <th>窗口参数</th>            <th>参数类型</th>            <th>说明</th>        </tr>    </thead>    <tbody>        <tr>            <td>top</td>            <td>Number</td>            <td>窗口顶部距离，像素值</td>        </tr>        <tr>            <td>left</td>            <td>Number</td>            <td>窗口左边距离，像素值</td>        </tr>        <tr>            <td>width</td>            <td>Number</td>            <td>窗口宽度</td>        </tr>        <tr>            <td>height</td>            <td>Number</td>            <td>窗口高度</td>        </tr>        <tr>            <td>menubar</td>            <td>yes,no</td>            <td>窗口是否显示菜单</td>        </tr>        <tr>            <td>toolbar</td>            <td>yes,no</td>            <td>窗口是否显示工具栏</td>        </tr>        <tr>            <td>scrollbars</td>            <td>yes,no</td>            <td>窗口是否显示滚动条</td>        </tr>        <tr>            <td>status</td>            <td>yes,no</td>            <td>窗口是否显示当前状态</td>        </tr>    </tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭当前窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;窗口对象&gt;.close();关闭指定窗口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mywin = <span class="variable language_">window</span>.<span class="title function_">open</span>(url, name, params);</span><br><span class="line">mywin.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><blockquote><p>print 打印</p></blockquote><ul><li>chrome中可以直接使用print() 调用打印窗口</li><li>firefix中必须使用windiw.print()，但是效果和chrome调用print()后，执行ctrl+shift+P一样，如果使用print()，则返回undefined</li><li>IE 中可以可以直接使用print(),返回undefined,但是效果和chrome调用print()后，执行ctrl+shift+P一样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;about:blank&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;fullscreen=1&quot;</span>);</span><br><span class="line"></span><br><span class="line">tmp.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">tmp.<span class="title function_">resizeTo</span>(screen.<span class="property">width</span> + <span class="number">20</span>, screen.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">tmp.<span class="title function_">focus</span>();</span><br><span class="line"></span><br><span class="line">tmp.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="property">message</span>[<span class="number">0</span>] + <span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config_ = <span class="string">&quot;left=0,top=0,width=&quot;</span> + (<span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">Width</span>) + <span class="string">&quot;,height=&quot;</span> + (<span class="variable language_">window</span>.<span class="property">screen</span>.<span class="property">Height</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="property">message</span>[<span class="number">0</span>] + <span class="string">&#x27;.html&#x27;</span>, <span class="string">&quot;winHanle&quot;</span>, config_);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟form提交打开新页面</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;form&quot;</span>);</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">setAttribute</span>(<span class="string">&#x27;action&#x27;</span>, <span class="string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="property">message</span>[<span class="number">0</span>] + <span class="string">&#x27;.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">f.<span class="property">target</span> = <span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(f);</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">submit</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;about:blank&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;fullscreen=1,top=20,left=0,width=&#x27;</span>+ (screen.<span class="property">width</span>-<span class="number">20</span>) +<span class="string">&#x27;,height=&#x27;</span>+ (screen.<span class="property">height</span>-<span class="number">130</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;window&quot;&gt;&lt;a href=&quot;#window&quot; class=&quot;headerlink&quot; title=&quot;window&quot;&gt;&lt;/a&gt;window&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;open&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="Window" scheme="https://lidengkedev.github.io/books/tags/Window/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/websocket/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/websocket/</id>
    <published>2022-07-01T11:16:59.000Z</published>
    <updated>2022-07-01T11:35:51.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WebSocket 是一种网络通信协议。RFC6455 定义了它的通信标准。<br>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。<br>这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。</p><p>WebSocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。WebSocket 只需要建立一次连接，就可以一直保持连接状态。</p><p>Web浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的HTTP连接不同，对服务器有重要的影响。<br>基于多线程或多进程的服务器无法适用于 WebSockets，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接。任何实际的 WebSockets 服务器端实现都需要一个异步服务器。</p><p>var Socket = new WebSocket(url, [protocol] );<br>第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p><blockquote><p>WebSocket 对象的属性</p></blockquote><table>    <thead>        <tr>            <th>属性</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>readyState</td>            <td>只读属性 readyState 表示连接状态，可以是以下值：0 - 表示连接尚未建立。1 - 表示连接已建立，可以进行通信。2 - 表示连接正在进行关闭。3 - 表示连接已经关闭或者连接不能打开。</td>        </tr>        <tr>            <td>bufferedAmount</td>            <td>只读属性 bufferedAmount 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。</td>        </tr>    </tbody></table><blockquote><p>WebSocket 对象的相关事件</p></blockquote><table>    <thead>        <tr>            <th>事件</th>            <th>事件处理程序</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>open</td>            <td>Socket.onopen</td>            <td>连接建立时触发</td>        </tr>        <tr>            <td>message</td>            <td>Socket.onmessage</td>            <td>客户端接收服务端数据时触发</td>        </tr>        <tr>            <td>error</td>            <td>Socket.onerror</td>            <td>通信发生错误时触发</td>        </tr>        <tr>            <td>close</td>            <td>Socket.onclose</td>            <td>连接关闭时触发</td>        </tr>    </tbody></table><blockquote><p>WebSocket 对象的相关方法</p></blockquote><table>    <thead>        <tr>            <th>方法</th>            <th>描述</th>        </tr>    </thead>    <tbody>        <tr>            <td>Socket.send()</td>            <td>使用连接发送数据</td>        </tr>        <tr>            <td>Socket.close()</td>            <td>关闭连接</td>        </tr>    </tbody></table><blockquote><p>实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化一个 WebSocket 对象</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:9998/echo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 web socket 连接成功触发事件</span></span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 send() 方法发送数据</span></span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&quot;发送数据&quot;</span>);</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;数据发送中...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收服务端数据时触发事件 </span></span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> received_msg = evt.<span class="property">data</span>; <span class="title function_">alert</span>(<span class="string">&quot;数据已接收...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 断开 web socket 连接成功触发事件</span></span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;连接已关闭...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h1&gt;&lt;p&gt;WebSocket 是一种网络通信协议。RFC6455 定义了它的通信标准。&lt;br&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="WebSocket" scheme="https://lidengkedev.github.io/books/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>String</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/string/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/string/</id>
    <published>2022-07-01T11:16:06.000Z</published>
    <updated>2022-07-01T11:35:42.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>indexOf 无法识别 NaN , undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>() == -<span class="number">1</span>; <span class="comment">// true</span></span><br><span class="line">[<span class="literal">undefined</span>].<span class="title function_">indexOf</span>() == -<span class="number">1</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;p&gt;indexOf 无法识别 NaN , undefined&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="String" scheme="https://lidengkedev.github.io/books/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Date</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/date/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/date/</id>
    <published>2022-07-01T11:14:24.000Z</published>
    <updated>2022-07-01T11:35:19.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>JS内置对象的坑：</p><p>1、new Date(‘2018-12-12’)的值不等于new Date(2018,12,12)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>)).<span class="title function_">toLocaleDateString</span>(); <span class="comment">// 2018/12/12</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2018</span>,<span class="number">12</span>,<span class="number">12</span>); <span class="comment">// Sat Jan 12 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2018</span>,<span class="number">12</span>,<span class="number">12</span>)).<span class="title function_">toLocaleDateString</span>(); <span class="comment">// 2019/1/12</span></span><br></pre></td></tr></table></figure><p>2、不同浏览器对时间的解析不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Chrome浏览器中：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在FireFox浏览器中：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// Date 2018-12-12T00:00:00.000Z</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/12&#x27;</span>); <span class="comment">// Date 2018-12-11T16:00:00.000Z</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在IE9、IE11浏览器中：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在IE7、IE8浏览器中：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在QQ浏览器中：</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018-12-12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/12&#x27;</span>); <span class="comment">// Wed Dec 12 2018 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>3、<code>new Date(&#39;2018/12/12&#39;)</code> 的值等于 <code>new Date(2018,12,12)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;&gt;&lt;/a&gt;Date&lt;/h1&gt;&lt;p&gt;JS内置对象的坑：&lt;/p&gt;
&lt;p&gt;1、new Date(‘2018-12-12’)的值不等于new Date(2018,12</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="Date" scheme="https://lidengkedev.github.io/books/tags/Date/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/calc/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/calc/</id>
    <published>2022-07-01T11:13:04.000Z</published>
    <updated>2022-07-01T11:35:11.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><blockquote><p>trie 树结构算法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数据</span></span><br><span class="line"><span class="keyword">var</span> input = &#123;</span><br><span class="line">  <span class="attr">h3</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;副总经理(市场)&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h1</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h0&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;公司机构&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h7</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h6&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;副总经理(总务)&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h4</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h3&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;销售经理&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h2</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;总经理&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h8</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h0&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;财务总监&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h6</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h4&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;仓管总监&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h5</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;h4&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;销售代表&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">h0</span>: &#123; <span class="attr">parent</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法逻辑</span></span><br><span class="line"><span class="keyword">var</span> trieData (obj) &#123;</span><br><span class="line">    <span class="keyword">var</span> key, res;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">var</span> parent = obj[key].<span class="property">parent</span>;</span><br><span class="line">        <span class="keyword">if</span> (parent === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            res = obj[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[parent][key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">trieData</span>(input);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(input)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算后的数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;公司机构&quot;</span>,</span><br><span class="line">        <span class="string">&quot;h2&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;总经理&quot;</span>,</span><br><span class="line">            <span class="string">&quot;h3&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;副总经理(市场)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;h4&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;销售经理&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;h6&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h4&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;仓管总监&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;h7&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h6&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;副总经理(总务)&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;h5&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h4&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;销售代表&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;h8&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;parent&quot;</span>: <span class="string">&quot;h0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;财务总监&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;trie 树结构算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight jav</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>伪静态</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/%E4%BC%AA%E9%9D%99%E6%80%81/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/%E4%BC%AA%E9%9D%99%E6%80%81/</id>
    <published>2022-07-01T11:11:44.000Z</published>
    <updated>2022-07-01T11:34:47.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h1><h2 id="什么是伪静态？"><a href="#什么是伪静态？" class="headerlink" title="什么是伪静态？"></a>什么是伪静态？</h2><p>伪静态就是网站本身是动态网页，转换成类似于静态的网页。如.php、.asp、.aspx等格式动态网页有时这类动态网页地址后跟“?”加参数来读取数据库内不同资料。</p><blockquote><p>伪静态作用</p></blockquote><p>很典型的案例即是discuz论坛系统，后台就有一个设置伪静态功能，开启伪静态后，动态网页即被转换重写成静态网页类型页面，通过浏览器访问地址和真的静态页面没区别。</p><p>前提服务器支持伪静态重写URL Rewrite功能。</p><blockquote><p>需要伪静态功能地方</p></blockquote><p>考虑搜索引擎优化SEO，将动态网页通过服务器处理成静态页面，如www.xxx.com/jk/fd.php?=12这样的动态网页处理成www.xxx.com/jk-fd-12.html这样格式静态页面，常见的论坛帖子页面，都是经过伪静态处理成静态页面格式html页面。</p><p>考虑网站所用的程序语言不易被发现，经过重写来伪静态来将动态网页的程序后缀变为html的静态页面格式。</p><h2 id="伪静态的利与弊"><a href="#伪静态的利与弊" class="headerlink" title="伪静态的利与弊"></a>伪静态的利与弊</h2><p>当然犹如一篇文章的作者所说的：”如果流量稍大一些使用伪静态就出现CPU使用超负荷，我的同时在线300多人就挂了，而不使用伪静态的时候同时在线超500人都不挂，我的IIS数是1000。”</p><p>确实是这样的，由于伪静态是用正则判断而不是真实地址，分辨到底显示哪个页面的责任也由直接指定转由CPU来判断了，所以CPU占有量的上升，确实是伪静态最大的弊病。</p><p>我们应该选择伪静态还是真静态？</p><ol><li>使用真静态和假静态对SEO来说没有什么区别</li><li>使用真静态可能将导致硬盘损坏并将影响论坛性能</li><li>使用伪静态将占用一定量的CPU占有率，大量使用将导致CPU超负荷</li><li>最重要的一点，我们要静态是为了SEO</li></ol><p>所以</p><ol><li>使用真静态的方法可以直接排除了，因为无论怎么生成，对硬盘来说都是很伤的。</li><li>既然真伪静态的效果一样，我们就可以选择伪静态了。</li><li>但是伪静态大量使用会造成CPU超负荷。</li><li>所以我们只要不大量使用就可以了。</li><li>既然静态只是给SEO看的，我们只需要伪静态给SEO就行了，不需要给用户使用。</li><li>所以我们只要在专门提供给SEO爬的Archiver中使用伪静态就可以了。</li></ol><p>真正的静态化和伪静态还是有本质的区别的。</p><p>为浏览用户处理一个纯粹htm和一个调用多个数据的php在CPU的使用率方面明显前者少。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;伪静态&quot;&gt;&lt;a href=&quot;#伪静态&quot; class=&quot;headerlink&quot; title=&quot;伪静态&quot;&gt;&lt;/a&gt;伪静态&lt;/h1&gt;&lt;h2 id=&quot;什么是伪静态？&quot;&gt;&lt;a href=&quot;#什么是伪静态？&quot; class=&quot;headerlink&quot; title=&quot;什么是伪静态？</summary>
      
    
    
    
    <category term="seo" scheme="https://lidengkedev.github.io/books/categories/seo/"/>
    
    
    <category term="seo" scheme="https://lidengkedev.github.io/books/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>SEO</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/seo/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/seo/</id>
    <published>2022-07-01T11:10:26.000Z</published>
    <updated>2022-07-01T11:32:41.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><h2 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h2><p>据一项研究表明：用户最满意的打开网页时间是2-5秒，如果等待超过10秒，99%的用户会关闭这个网页。</p><p>在TCP握手之前要进行DNS查询，也就是域名地址解析，DNS解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的IP。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比较耗时的操作，<br>比如HTTP的请求，每一个link、img、script标签都会向服务器发送请求，<br>而每一个浏览器同时向同一台服务器发送请求的个数是有限制的，请求次数越多浏览器承受的压力就越大，自然效率就越低。</p><p>对于图片资源应该这么做：</p><ul><li>对于简单的图片如三角形、矩形等能用css实现的就用样式实现。</li><li>把常用的图标打成iconfont来使用。</li><li>由于浏览器限制了向同一台服务器同时发送请求的次数，所以尽量把图片资源放在多台CDN上，这里不限制图片，js和css等静态资源同样适用。</li><li>对于小图片用base64编码后直接使用编码文本。</li><li>使用CSS Sprites技术来将图片资源合并成雪碧图，webpack有这样的插件，或者到github上下载一个。</li><li>多图片列表展示完全可以使用懒加载技术来控制图片的加载。</li><li>选择正确的图片格式：WebP、PNG、JPEG。</li></ul><p>如果把样式表放在文档底部浏览器会重绘页面元素，阻塞内容逐步呈现，从而造成白屏。js文件的加载会阻塞DOM树的构建，也可能会导致白屏的出现。</p><p>当script标签上加上defer属性以后，表示该JS文件会并行下载，但是会放到HTML解析完成后顺序执行，而script标签加上async属性以后，表示加载和渲染后续文档元素的过程将和JS文件的加载与执行并行进行。所以：</p><ul><li>样式表放在头部</li><li>脚本放在底部</li></ul><p>事件的三个阶段：捕获阶段、目标阶段、冒泡阶段</p><p>在绑定事件的时候要多使用事件委托而不是直接使用事件绑定，这样会大大提高事件的效率。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>希望在点击每个li的时候可以输出该标签的内容，使用事件委托：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line"><span class="keyword">var</span> target = event.<span class="property">target</span> || event.<span class="property">srcElement</span>;</span><br><span class="line"><span class="keyword">if</span> (target.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;li&#x27;</span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(target.<span class="property">innerHTML</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过高的触发率会导致响应速度跟不上触发频率，出现延迟，假死或者卡顿的显现，对于触发频率比较高的函数使用节流来限制，保证一定时间内核心代码只执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流，每隔一点时间执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (fn, wait) &#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>));</span><br><span class="line">timer = <span class="literal">null</span>;</span><br><span class="line">&#125;, wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现输入框输入文本自动联想匹配结果，用户每次在keypress的时候都要异步请求接口，造成资源浪费，最好是等用户输入完了再进行请求，可以写一个防抖函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖，只执行最后一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span> (fn, wait) &#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>));</span><br><span class="line">&#125;, wait);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DOM操作的优化：</p><ul><li>避免频繁的DOM操作，尽量将操作合并在一起一次性操作。</li><li>使用class来替代样式的变更</li><li>使用css动画来代替js动画</li><li>使用requestAnimationFrame 来替代setInterval操作动画</li></ul><p>这么做的目的都是为了减少浏览器的重绘与回流，requestAnimationFrame 最大的优势是由系统来决定回调函数的执行时机，<br>具体一点讲，<br>如果屏幕刷新率是60Hz，那么回调函数就是16.7ms执行一次，如果刷新率是75Hz，那么这个时间间隔就会变成1000/75=13.3ms，<br>换句话说就是，requestAnimationFrame的步伐跟着系统的刷新步伐走，它能保证回调函数在屏幕每一次的刷新间隔中只执行一次，这样就不会引起丢丢频现象，也不会导致动画出现卡顿的问题。</p><p>css写法要遵循下面的原则：</p><ul><li>正确使用css前缀，以解决浏览器的兼容性</li><li>对于可继承的属性尽量使用继承</li><li>避免css选择器嵌套过深，影响性能</li><li>css reset的内容以及基本内容要单独提取出来方便所有页面公用</li></ul><p>在构建的时候要遵循：</p><ul><li>js混淆</li><li>资源压缩，包括js、css、html和图片压缩</li><li>对于单页面应用要考虑公共代码的提取和分离，可以充分利用路由做到按需加载</li></ul><p>利用浏览器的缓存站点资源的功能来优化网站，减少不必要的流量开支。</p><p>可以通过hash来命名资源文件，只有内容发生改动的文件hash才会改变，这样对于不变的文件浏览器就可以从本地缓存读取。</p><p>还可以借助http缓存，利用服务端来设置缓存策略，常见的缓存策略有<strong>强制缓存</strong>(Cache-Control、Expires)和<strong>协商缓存</strong>(Etag、Last-Modified),通过设置不同的header来达到控制浏览器缓存的目的。</p><p>要注意防止XXS和SRF攻击</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SEO&quot;&gt;&lt;a href=&quot;#SEO&quot; class=&quot;headerlink&quot; title=&quot;SEO&quot;&gt;&lt;/a&gt;SEO&lt;/h1&gt;&lt;h2 id=&quot;前端优化&quot;&gt;&lt;a href=&quot;#前端优化&quot; class=&quot;headerlink&quot; title=&quot;前端优化&quot;&gt;&lt;/a&gt;前端优</summary>
      
    
    
    
    <category term="seo" scheme="https://lidengkedev.github.io/books/categories/seo/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="seo" scheme="https://lidengkedev.github.io/books/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/webpack/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/webpack/</id>
    <published>2022-07-01T11:09:04.000Z</published>
    <updated>2022-07-01T11:32:31.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><blockquote><p>webpack 在打包构建时<code>-webkit-box-orient: verical;</code>会被删除掉</p></blockquote><p>原因是<code>optimize-css-assets-webpack-plugin</code>这个插件的问题</p><p>解决方式:可以使用如下写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">    -webkit-box-orient: vertical;</span><br><span class="line">    <span class="comment">/*! autoprefixer: on */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h1&gt;&lt;h2 id=&quot;问题汇总&quot;&gt;&lt;a href=&quot;#问题汇总&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="webpack" scheme="https://lidengkedev.github.io/books/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://lidengkedev.github.io/books/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>VUE SSR 服务端渲染</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/vue/ssr/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/vue/ssr/</id>
    <published>2022-07-01T11:07:35.000Z</published>
    <updated>2022-07-01T11:34:55.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUE-SSR-服务端渲染"><a href="#VUE-SSR-服务端渲染" class="headerlink" title="VUE SSR 服务端渲染"></a>VUE SSR 服务端渲染</h1><h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple vue-ssr-example</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-ssr-example</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><h2 id="安装服务端插件"><a href="#安装服务端插件" class="headerlink" title="安装服务端插件"></a>安装服务端插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install express vue-server-renderer</span><br><span class="line"></span><br><span class="line">npm install vue-ssr-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">yarn add express vue-server-renderer</span><br><span class="line"></span><br><span class="line">yarn add vue-webpack-plugin</span><br></pre></td></tr></table></figure><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><h3 id="配置主函数"><a href="#配置主函数" class="headerlink" title="配置主函数"></a>配置主函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Receives the context of the render call, returning a Promise resolution to the root Vue instance.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置入口文件"><a href="#配置入口文件" class="headerlink" title="配置入口文件"></a>配置入口文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-ssr-example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- vue-ssr-outlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/dist/build.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置打包工具"><a href="#配置打包工具" class="headerlink" title="配置打包工具"></a>配置打包工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the Vue SSR plugin. Don`t forget this. :P</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// The target should be set to &quot;node&quot; avoid packaging build-ins.</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="comment">// The entry should be our server entry file, not the default one.</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.server.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">pubilcPath</span>: <span class="string">&#x27;/dist/&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;build.js&#x27;</span>,</span><br><span class="line">        <span class="comment">// Outputs node-compatible modules instead of browser-compatible.</span></span><br><span class="line">        <span class="attr">libraryTarget</span>: <span class="string">&#x27;commonjs2&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">loaders</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)$/</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[name].[ext]?[hash]&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// We can remove the devServer block.</span></span><br><span class="line">    <span class="attr">performance</span>: &#123;</span><br><span class="line">        <span class="attr">hints</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Aviods bundling external dependencies, so node can load them directly from node_modules</span></span><br><span class="line">    <span class="attr">externals</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>).<span class="property">dependencies</span>),</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// No need to put these behind a production env variable.</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// Add the SSR plugin here.</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueSSRPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">NODE_ENV</span>: <span class="string">&#x27;&quot;production&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">UglifyJsPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">compress</span>: &#123;</span><br><span class="line">                <span class="attr">warnings</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">LoaderOptionsPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">minimize</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置启动脚本"><a href="#配置启动脚本" class="headerlink" title="配置启动脚本"></a>配置启动脚本</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build:server &amp;&amp; npm run build:client&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build:client&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --proress --hide-modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build:server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production webpack --config webpack.server.config.js --pregress --hide-modules&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="配置服务API"><a href="#配置服务API" class="headerlink" title="配置服务API"></a>配置服务API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!user/bin/env node</span><br><span class="line"></span><br><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createBundleRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundleRenderer = <span class="title function_">createBundleRenderer</span>(</span><br><span class="line">    <span class="comment">// Load the SSR bundle width require.</span></span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;./dist/vue-ssr-bundle.json&#x27;</span>),</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Yes, I know, readFileSync is bad practice. It is just shorter to read here.</span></span><br><span class="line">        <span class="attr">template</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the express app.</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server static assets from ./dist on the /dist route.</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/dist&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render all other routes width the bundleRenderer.</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    bundleRenderer</span><br><span class="line">    <span class="comment">// Renders directly to the response stream.</span></span><br><span class="line">    <span class="comment">// The argument is passed as &quot;context&quot; to main.server.js in the SSR bundle.</span></span><br><span class="line">    .<span class="title function_">renderToStream</span>(&#123; <span class="attr">url</span>: req.<span class="property">path</span> &#125;)</span><br><span class="line">    .<span class="title function_">pipe</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the app to this port.</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build client and server bundles</span></span><br><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the HTTP server</span></span><br><span class="line">$ node ./server.js</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VUE-SSR-服务端渲染&quot;&gt;&lt;a href=&quot;#VUE-SSR-服务端渲染&quot; class=&quot;headerlink&quot; title=&quot;VUE SSR 服务端渲染&quot;&gt;&lt;/a&gt;VUE SSR 服务端渲染&lt;/h1&gt;&lt;h2 id=&quot;创建一个新项目&quot;&gt;&lt;a href=&quot;#创建</summary>
      
    
    
    
    <category term="vue" scheme="https://lidengkedev.github.io/books/categories/vue/"/>
    
    
    <category term="vue" scheme="https://lidengkedev.github.io/books/tags/vue/"/>
    
    <category term="ssr" scheme="https://lidengkedev.github.io/books/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/linux/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/linux/</id>
    <published>2022-07-01T11:06:05.000Z</published>
    <updated>2022-07-01T11:32:55.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="命令编辑及光标移动"><a href="#命令编辑及光标移动" class="headerlink" title="命令编辑及光标移动"></a>命令编辑及光标移动</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl + u    : 删除从开头到光标处的命令文本</span><br><span class="line">ctrl + k    : 删除从光标到结尾处的命令文本</span><br><span class="line">ctrl + a    : 光标移动到命令开头</span><br><span class="line">ctrl + e    : 光标移动到命令结尾</span><br><span class="line">alt + f     : 光标向前移动一个单词</span><br><span class="line">alt + b     : 光标向前移动一个单词</span><br><span class="line">atrl + w    : 删除一个词（以空格隔开的字符串）</span><br></pre></td></tr></table></figure><h2 id="历史命令快速执行"><a href="#历史命令快速执行" class="headerlink" title="历史命令快速执行"></a>历史命令快速执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + r : 搜索执行过得命令</span><br></pre></td></tr></table></figure><h2 id="部分历史命令查看"><a href="#部分历史命令查看" class="headerlink" title="部分历史命令查看"></a>部分历史命令查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># history 会显示大量的历史命令，而fs -l只会显示部分</span></span><br><span class="line"></span><br><span class="line">$ fs -l</span><br></pre></td></tr></table></figure><h2 id="实时查看日志"><a href="#实时查看日志" class="headerlink" title="实时查看日志"></a>实时查看日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tail -f 加文件名，可以实时显示日志文件内容</span></span><br><span class="line"><span class="comment"># 使用 less 命令查看文件内容，并且使用 shift + f 键，也可以达到类似的效果</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">tail</span> -f filename.log</span><br></pre></td></tr></table></figure><h2 id="磁盘或者内存情况查看"><a href="#磁盘或者内存情况查看" class="headerlink" title="磁盘或者内存情况查看"></a>磁盘或者内存情况查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 df 命令可以快速查看各挂载路径磁盘占用情况</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">/dev/sda14   4.6G   10M     4.4G    1%</span><br><span class="line">/dev/sda11   454M  366M      61M   86%</span><br><span class="line">/dev/sda15    55G   18G      35G   35%</span><br></pre></td></tr></table></figure><p>如果已经知道home目录占用空间较大了，想知道home目录下各个目录占用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里指定了路径的深度，否则的话，它会递归统计子目录占用空间大小</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">du</span> -h --max-depth=1 /home(或者-d 1)</span><br><span class="line">18G     /home/hyb</span><br><span class="line">16K     /home/lost+fund</span><br><span class="line">18G     /home/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前内存的使用情况</span></span><br><span class="line"><span class="comment"># 通过free的结果，很容易看到当前总共内容多少，剩余可用内存多少</span></span><br><span class="line"></span><br><span class="line">$ free -h</span><br><span class="line">            total     used</span><br><span class="line">Mem:        7.7G      3.5G</span><br><span class="line">Swap:       7.6G        0B</span><br></pre></td></tr></table></figure><p>使用 -h 参数：</p><p>-h 参数的作用是使得结果以人类可读的方式呈现</p><h2 id="根据名字查找进程"><a href="#根据名字查找进程" class="headerlink" title="根据名字查找进程"></a>根据名字查找进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hello 是进程名</span></span><br><span class="line"></span><br><span class="line">$ pgrep hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">$ pidof hello</span><br></pre></td></tr></table></figure><h2 id="根据名称杀死进程"><a href="#根据名称杀死进程" class="headerlink" title="根据名称杀死进程"></a>根据名称杀死进程</h2><p>一般我们可以使用 kill -9 pid 方式杀死一个进程，但是这样就需要先找到这个进程的进程id，实际上我们也可以直接根据名称杀死进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ killall hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">$ pkill hello</span><br></pre></td></tr></table></figure><h2 id="查看进程运行时间"><a href="#查看进程运行时间" class="headerlink" title="查看进程运行时间"></a>查看进程运行时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -p 24525 -o lstart.etime</span><br><span class="line">                 STARTED    ELAPSED</span><br><span class="line">Sat Mar 23 20:52:08 2019      02:45</span><br></pre></td></tr></table></figure><h2 id="快速目录切换"><a href="#快速目录切换" class="headerlink" title="快速目录切换"></a>快速目录切换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回到上一个目录</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到用户家目录</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> </span><br></pre></td></tr></table></figure><h2 id="多条命令执行"><a href="#多条命令执行" class="headerlink" title="多条命令执行"></a>多条命令执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果当前目录是 / 目录，并且 /temp/log目录不存在，那么就会</span></span><br><span class="line"><span class="comment"># bash: cd: /temp/log: No such file or directory (突然陷入沉默)</span></span><br><span class="line"><span class="comment"># 因为 ; 可以执行多条命令，但是不会因为前一条命令失败而导致后面的不会执行</span></span><br><span class="line"><span class="comment"># 因此，cd 执行失败后，仍然会继续执行 rm -rf *</span></span><br><span class="line"><span class="comment"># 解决方案是：cd /temp/log&amp;&amp;rm -rf *</span></span><br><span class="line"><span class="comment"># 这样就会确保前面一条命令执行成功，才会执行后面一条</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /temp/log/;<span class="built_in">rm</span> -rf *</span><br></pre></td></tr></table></figure><h2 id="查看压缩日志文件"><a href="#查看压缩日志文件" class="headerlink" title="查看压缩日志文件"></a>查看压缩日志文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ zcat test.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">$ zless test.gz</span><br></pre></td></tr></table></figure><h2 id="删除乱码文件"><a href="#删除乱码文件" class="headerlink" title="删除乱码文件"></a>删除乱码文件</h2><p>无论是自已意外创建还是程序异常创建，难免会出现一些命令奇怪或者乱码文件，可以选择删除Linux中特殊名称文件的多种方式</p><p>对于特殊字符，如&lt;&gt;!*等组成的文件如何删除呢？如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> &lt;&gt;\!*</span><br><span class="line"><span class="built_in">rm</span> missing operand</span><br><span class="line">Try <span class="string">&#x27;rm --help&#x27;</span> <span class="keyword">for</span> more infomation.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于这种类型文件，需要用引号将文件名包含起来</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> <span class="string">&quot;&lt;&gt;\!*&quot;</span></span><br></pre></td></tr></table></figure></p><h2 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h2><p>比如有一个大文件，你想快速删除，或者不想删除，但是想清空内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;filename</span><br></pre></td></tr></table></figure><h2 id="将日志同时记录文件并打印到控制台"><a href="#将日志同时记录文件并打印到控制台" class="headerlink" title="将日志同时记录文件并打印到控制台"></a>将日志同时记录文件并打印到控制台</h2><p>在执行shell脚本，常常会将日志重定向，但是这样的话，控制台就没有打印了，如何使用技能记录日志文件，又能将日志输出到控制台呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./test.sh |<span class="built_in">tee</span> test.log</span><br></pre></td></tr></table></figure><h2 id="终止并回复进程执行"><a href="#终止并回复进程执行" class="headerlink" title="终止并回复进程执行"></a>终止并回复进程执行</h2><p>我们使用 ctrl + Z 暂停一个进程的执行，也可以使用fg恢复执行。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们发现文件过多的时候，使用 ctrl + z 暂停程序，</span></span><br><span class="line"><span class="comment"># 而如果又想要从刚才的地方继续执行，则只需要使用fg命令即可恢复执行。</span></span><br><span class="line"><span class="comment"># 或者使用bg使得进程继续在后台执行</span></span><br></pre></td></tr></table></figure><h2 id="计算程序运行时间"><a href="#计算程序运行时间" class="headerlink" title="计算程序运行时间"></a>计算程序运行时间</h2><p>我们可能会用进程写一些小程序，并想知道它的运行时间，实际上我们可以很好的利用 time 命令帮我们计算，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 它会显示系统时间，用户时间以及实际使用的总时间</span></span><br><span class="line"></span><br><span class="line">$ time ./fibo 30</span><br><span class="line">the 30 result is 832040</span><br><span class="line"></span><br><span class="line">real    0m0.088s</span><br><span class="line">user    0m0.084s</span><br><span class="line">sys     0m0.004s</span><br></pre></td></tr></table></figure><h2 id="查看内存占用前10的进程"><a href="#查看内存占用前10的进程" class="headerlink" title="查看内存占用前10的进程"></a>查看内存占用前10的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ps -aux|<span class="built_in">sort</span> -k4nr |<span class="built_in">head</span> -n 10</span><br></pre></td></tr></table></figure><h2 id="快速查找你需要的命令"><a href="#快速查找你需要的命令" class="headerlink" title="快速查找你需要的命令"></a>快速查找你需要的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ man -k <span class="string">&quot;copy files&quot;</span></span><br><span class="line"><span class="built_in">cp</span> (1)          - copy files and directories</span><br><span class="line">cpio (1)        - copy files to and from archives</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -k 参数，使得与 copy files 相关的帮助手册都显示出来了</span></span><br></pre></td></tr></table></figure><h2 id="命令行下复制粘贴"><a href="#命令行下复制粘贴" class="headerlink" title="命令行下复制粘贴"></a>命令行下复制粘贴</h2><p>我们知道，在命令行下，复制不能再是 ctrl + c 了，因为它表示终止当前进程，而控制台下的复制粘贴需要使用下面的快捷键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctrl + insert</span><br><span class="line">shift + insert</span><br></pre></td></tr></table></figure><h2 id="搜索包含某个字符串的文件"><a href="#搜索包含某个字符串的文件" class="headerlink" title="搜索包含某个字符串的文件"></a>搜索包含某个字符串的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下查找包含test字符串的文件</span></span><br><span class="line"></span><br><span class="line">$ grep -rn <span class="string">&quot;test&quot;</span></span><br><span class="line">test2.txt:1:<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 它可以找到该字符串在哪个文件的第几行</span></span><br></pre></td></tr></table></figure><h2 id="屏幕冻结"><a href="#屏幕冻结" class="headerlink" title="屏幕冻结"></a>屏幕冻结</h2><p>程序运行时，终端可能输出大量日志，你想简单查看一下，又不想记录日志文件，此时可以使用 ctrl + s 键，冻结屏幕，使得日志不再继续输出，如果想要恢复，可以使用 ctrl + q 退出冻结。</p><h2 id="无编辑器情况下编辑文本文件"><a href="#无编辑器情况下编辑文本文件" class="headerlink" title="无编辑器情况下编辑文本文件"></a>无编辑器情况下编辑文本文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;file.txt</span><br><span class="line">some words</span><br><span class="line">(ctrl + d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑完成后， ctrl + d 即可保存</span></span><br></pre></td></tr></table></figure><h2 id="查看-elf-文件"><a href="#查看-elf-文件" class="headerlink" title="查看 elf 文件"></a>查看 elf 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看elf文件头信息</span></span><br><span class="line"></span><br><span class="line">$ readelf -n filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看库中是否包含某个接口</span></span><br><span class="line"><span class="comment"># 这里是从文件 filename 中查看是否包含interface接口，前提是该文件包含符号表</span></span><br><span class="line"></span><br><span class="line">$ nm filename |grep interface</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;h2 id=&quot;命令编辑及光标移动&quot;&gt;&lt;a href=&quot;#命令编辑及光标移动&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="linux" scheme="https://lidengkedev.github.io/books/categories/linux/"/>
    
    
    <category term="linux" scheme="https://lidengkedev.github.io/books/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>知识点汇总</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/index/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/index/</id>
    <published>2022-07-01T11:04:22.000Z</published>
    <updated>2022-07-01T11:35:34.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript知识点汇总"><a href="#JavaScript知识点汇总" class="headerlink" title="JavaScript知识点汇总"></a>JavaScript知识点汇总</h1><h2 id="JS-的数据类型"><a href="#JS-的数据类型" class="headerlink" title="JS 的数据类型"></a>JS 的数据类型</h2><p>基本类型：</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol (ES6新增)</li></ul><p>引用类型：</p><ul><li>Object</li><li>Array</li><li>Function</li></ul><h3 id="基本类型和引用类型的区别"><a href="#基本类型和引用类型的区别" class="headerlink" title="基本类型和引用类型的区别"></a>基本类型和引用类型的区别</h3><p>基本类型和引用类型存储内存的位置不同，基本类型直接存储在栈中，而引用类型存储在堆中，同时在栈中存储了指针，而这个指针指向正式堆中实体的起始位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a，b都是值类型，两者分别赋值，相互之间没有任何影响</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.<span class="property">x</span> = <span class="number">100</span></span><br><span class="line">b.<span class="property">y</span> = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// &#123; x: 100, y: 200 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// &#123; x: 100, y: 200 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a,b都是引用类型，</span></span><br><span class="line"><span class="comment">// 在执行b=a之后，修改b的属性值，a的属性值也跟着变化</span></span><br><span class="line"><span class="comment">// 因为a和b都是引用类型，指向了同一个内存地址，</span></span><br><span class="line"><span class="comment">// 即两者引用的是同一个值，</span></span><br><span class="line"><span class="comment">// 因此修改b属性时，a的值也随之改变了。</span></span><br></pre></td></tr></table></figure><h3 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h3><blockquote><p>typeof</p></blockquote><p>typeof返回一个表示数据类型的字符串，返回结果包括：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="string">&quot;symbol&quot;</span></span><br><span class="line"><span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="string">&quot;undefined&quot;</span></span><br><span class="line"><span class="string">&quot;function&quot;</span></span><br></pre></td></tr></table></figure><br>7种数据类型，但是不能判断 <code>null</code>、<code>array</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>()         <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;&#x27;</span>               <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>                <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>             <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>        <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>()   <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>             <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> []               <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>()       <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>()     <span class="comment">// object</span></span><br></pre></td></tr></table></figure><blockquote><p>instanceof</p></blockquote><p>instanceof 是用来判断A是否是B的实例，表达式为：<code>A instanceof B</code>,如果A是B的实例则返回<code>true</code>,否则返回<code>false</code></p><p>instanceof 运算符用来测试一个对象在器原型链中是否存在一个构造函数的<code>prototype</code>属性，但是它不能检测<code>null</code>和<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>             <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>            <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>      <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>() <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>  <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Null</span>            <span class="comment">// 报错</span></span><br><span class="line"><span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="literal">undefined</span>  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>严格运算符 ===</p></blockquote><p>只能用于判断 null 和 undefined ,因为这两种类型的值都是唯一的</p><blockquote><p>constructor</p></blockquote><p>constructor 作用和 instanceof 非常相似，但是constructor 检测 Object 与 instanceof 不一样，还可以处理基本数据类型的检测</p><p>不过函数的 contructor 是不稳定的，这个主要体现在把类的原型进行重写，在重写的过程中很有可能出现把之前的 contructor 给覆盖了， 这样检测出来的结果就是不准确的。</p><blockquote><p>Object.prototype.toString.call()</p></blockquote><p>Object.prototype.toString.call()最准确最常用的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;&#x27;</span>)              <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)               <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>)            <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>)       <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>)            <span class="comment">// [Object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Function</span>())  <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())      <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([])              <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>())    <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>())     <span class="comment">// [object Error]</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><p>浅拷贝只复制某一个对象的指针，而不是复制对象本身，新旧对象还是共享同一块内存。</p><p>浅拷贝的实现方式：</p><ul><li>Object.assign(): 需要注意的是目标对象只有一层的时候是深拷贝</li><li>Array.prototype.concat()</li><li>Array.prototype.slice()</li></ul><p>深拷贝就是在拷贝数据的时候，将数据的所有引用结构都拷贝一份。</p><p>简单的来说就是：在内存中存在两个数据结构完全相同又互相独立的数据，将引用类型进行复制，而不是只复制其引用关系。</p><p>深拷贝的实现方式：</p><ul><li>热门的函数库lodash,也有提供_.cloneDeep用来做深拷贝</li><li>jquery 提供一个 $.extend 可以用来做深拷贝</li><li>JSON.parse(JSON.stringify())</li><li>手写递归方法</li></ul><p>递归实现深拷贝的原理：</p><p>要拷贝一个数据，我们肯定要去便利它的属性，如果这个对象的属性仍然是对象，继续使用这个方法，如此往复。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义检测数据类型的功能函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkedType</span> (target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(target).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现深度克隆 --- 对象/数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span> (target) &#123;</span><br><span class="line">    <span class="comment">// 判断拷贝的数据类型</span></span><br><span class="line">    <span class="comment">// 初始化变量 result 成为最终克隆的数据</span></span><br><span class="line">    <span class="keyword">let</span> result,</span><br><span class="line">        targetType = <span class="title function_">checkedType</span>(target);</span><br><span class="line">    <span class="keyword">if</span> (targetType === <span class="string">&#x27;Object&#x27;</span>) &#123;</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetType === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">        result = []</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历目标函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="comment">// 获取遍历数据结构的每一项值</span></span><br><span class="line">        <span class="keyword">let</span> value = target[i];</span><br><span class="line">        <span class="comment">// 判断目标结构中的每一项值是否存在对象/数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">checkedType</span>(value) === <span class="string">&#x27;Object&#x27;</span> || <span class="title function_">checkedType</span>(value) === <span class="string">&#x27;Array&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 对象/数组里嵌套了对象/数组</span></span><br><span class="line">            <span class="comment">// 继续遍历获取到value值</span></span><br><span class="line">            result[i] = <span class="title function_">clone</span>(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到value值最基本的数据类型或者是函数</span></span><br><span class="line">            result[i] = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="执行上下文和执行栈"><a href="#执行上下文和执行栈" class="headerlink" title="执行上下文和执行栈"></a>执行上下文和执行栈</h3><h3 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h3 id="this全面解析"><a href="#this全面解析" class="headerlink" title="this全面解析"></a>this全面解析</h3><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="同步-vs-异步"><a href="#同步-vs-异步" class="headerlink" title="同步 vs 异步"></a>同步 vs 异步</h3><h3 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h3><h3 id="前端异步的场景"><a href="#前端异步的场景" class="headerlink" title="前端异步的场景"></a>前端异步的场景</h3><h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><h2 id="原型链与继承"><a href="#原型链与继承" class="headerlink" title="原型链与继承"></a>原型链与继承</h2><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h2 id="DOM操作与BOM操作"><a href="#DOM操作与BOM操作" class="headerlink" title="DOM操作与BOM操作"></a>DOM操作与BOM操作</h2><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><h3 id="DOM事件模型和事件流"><a href="#DOM事件模型和事件流" class="headerlink" title="DOM事件模型和事件流"></a>DOM事件模型和事件流</h3><blockquote><p>事件冒泡</p></blockquote><h3 id="事件代理-事件委托"><a href="#事件代理-事件委托" class="headerlink" title="事件代理(事件委托)"></a>事件代理(事件委托)</h3><h3 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h3><p>BOM (浏览器对象模型)是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览跳转到哪个地址。</p><ul><li>window.screen 对象：包含有关用户屏幕的信息</li><li>window.loaction 对象：用于获得当前页面的地址(URL), 并把浏览器重定向到新页面</li><li>window.history 对象：浏览器历史的前进后退等</li><li>window.navigator 对象：常常用来获取浏览器信息、是否移动端访问等等</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕的宽度和高度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">width</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(screen.<span class="property">height</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取网站、协议、path、参数、hash等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如当前网址是 https://www.baidu.com/s?ie=utf-8&amp;f=8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">href</span>)      <span class="comment">// https://www.baidu.com/s?ie=utf-8&amp;f=8#some</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">protocol</span>)  <span class="comment">// https:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>)  <span class="comment">// /s</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>)    <span class="comment">// ?ie=utf-8&amp;f=8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">hash</span>)      <span class="comment">// #some</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器的前进、后退功能</span></span><br><span class="line"></span><br><span class="line">history.<span class="title function_">back</span>()</span><br><span class="line">history.<span class="title function_">forward</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取浏览器特性 (即俗称的UA) 然后识别客户端，例如判断是不是Chrome浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span></span><br><span class="line"><span class="keyword">var</span> isChrome = ua.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isChrome)</span><br></pre></td></tr></table></figure><h3 id="Ajax-与跨域"><a href="#Ajax-与跨域" class="headerlink" title="Ajax 与跨域"></a>Ajax 与跨域</h3><p>Ajax是一种异步请求数据的一种技术手段，对于改善用户的体验和程序的性能很有帮助。</p><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>几种常见模块化规范的简介：</p><ul><li>CommonJS 规范主要用于服务端编程，加载模块是同步的，这个并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。</li><li>AMD 规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD规范与AMD规范很相似。都是用于浏览器编程，依赖就近，延迟执行，可以很容易在node.js中运行。不过依赖SPM打包，模块的加载逻辑偏重ES6在语言标准的层面上，实现了模块功能，而且实现的相当简单，完全可以取代CommonJS和AMD规范，成为了浏览器和服务器通用的模块解决方案。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript知识点汇总&quot;&gt;&lt;a href=&quot;#JavaScript知识点汇总&quot; class=&quot;headerlink&quot; title=&quot;JavaScript知识点汇总&quot;&gt;&lt;/a&gt;JavaScript知识点汇总&lt;/h1&gt;&lt;h2 id=&quot;JS-的数据类型&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/js/ajax/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/js/ajax/</id>
    <published>2022-07-01T11:03:08.000Z</published>
    <updated>2022-07-01T11:35:03.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>Ajax(Asynchronous JavaScript and XML),是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><h2 id="原生请求"><a href="#原生请求" class="headerlink" title="原生请求"></a>原生请求</h2><p>把用户的信息提交到服务器，并把服务器的响应输出</p><p><strong>XMLHttpRequest对象是Ajax技术的核心所在</strong></p><ol><li>生成请求对象，XMLHTTPReQuest，通过该对象和服务器交互</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpReQuest</span>) &#123;</span><br><span class="line">    <span class="comment">//非IE</span></span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpReQuest</span>();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用open，设置请求方式以及请求的地址，参数名必须和服务器保持一致<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://192.168.1.118:3000/?user=&#x27;</span>+username+<span class="string">&#x27;&amp;pwd=&#x27;</span>+pwdValue;</span><br><span class="line"><span class="comment">//参数1：请求方式 GET POST</span></span><br><span class="line"><span class="comment">//参数2：请求资源的地址</span></span><br><span class="line"><span class="comment">//参数3：是否异步请求，true,false</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,url,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li>设置请求过程的监控</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//xhr.readyState == 0   初始化中</span></span><br><span class="line">    <span class="comment">//xhr.readyState == 1   调用open</span></span><br><span class="line">    <span class="comment">//xhr.readyState == 2   调用send发送请求</span></span><br><span class="line">    <span class="comment">//xhr.readyState == 3   正在接收数据</span></span><br><span class="line">    <span class="comment">//xhr.readyState == 4   服务器响应完毕</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">//服务器返回的状态码判断</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//输出服务器响应的信息</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>发送请求</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h3 id="原生Ajax方法"><a href="#原生Ajax方法" class="headerlink" title="原生Ajax方法"></a>原生Ajax方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> javascriptAjax = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断参数是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">data</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isObject = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> ? (<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data) === <span class="string">&#x27;&#123;&#125;&#x27;</span> ? <span class="literal">false</span> : <span class="literal">true</span>) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置参数</span></span><br><span class="line"><span class="comment"> * 参数对象转换为字符串拼接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">obj</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> setParamsConfig = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> dataStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isObject</span>(obj)) &#123;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">dataStr += key + <span class="string">&#x27;=&#x27;</span> + obj[key] + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.生成请求对象，XMLHTTPReQuest，通过该对象和服务器交互</span></span><br><span class="line"><span class="keyword">var</span> createXHR = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();<span class="comment">//非IE</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.使用open，设置请求方式以及请求的地址，参数名必须和服务器保持一致</span></span><br><span class="line"><span class="keyword">var</span> setRequestMethod = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">createXHR</span>();</span><br><span class="line"><span class="keyword">var</span> type = params.<span class="property">type</span> ? params.<span class="property">type</span> : <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> url = params.<span class="property">url</span> ? params.<span class="property">url</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = params.<span class="property">async</span> ? params.<span class="property">async</span> : <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">switch</span> (type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">url += <span class="string">&#x27;?&#x27;</span>+ <span class="title function_">setParamsConfig</span>(params.<span class="property">data</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">open</span>(type, url, <span class="keyword">async</span>);</span><br><span class="line"><span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.设置请求过程的监控</span></span><br><span class="line"><span class="keyword">var</span> listenRequestProcess = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">setRequestMethod</span>(params);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">params.<span class="title function_">success</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.发送请求</span></span><br><span class="line"><span class="keyword">var</span> sendAjax = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">listenRequestProcess</span>(params);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isObject</span>(params.<span class="property">data</span>)) &#123;</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlenconded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title function_">setParamsConfig</span>(params.<span class="property">data</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sendAjax;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">javascriptAjax</span>(&#123;</span><br><span class="line"><span class="attr">type</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;data/ajax.json&#x27;</span>,</span><br><span class="line"><span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Jsonp请求"><a href="#Jsonp请求" class="headerlink" title="Jsonp请求"></a>Jsonp请求</h2><blockquote><p>jsonp请求需要后台配合吗？</p></blockquote><p>答案是肯定的。jsonp请求后端必须做配置，否则同样无法获取到数据。</p><blockquote><p>jsonp的缺点</p></blockquote><ul><li>需要后台代码做处理，改动后台代码</li><li>只能使用get请求方式处理jsonp请求</li><li>发送的不是XMLHttpRequest请求</li></ul><h3 id="jsonp前台需要做的处理"><a href="#jsonp前台需要做的处理" class="headerlink" title="jsonp前台需要做的处理"></a>jsonp前台需要做的处理</h3><blockquote><p>使用jQuery库</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080/test/get&#x27;</span>,</span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用原生方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonpCallback = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DOM操作在body中追加script标签，使用script标签src属性的特性进行做跨域请求</span></span><br><span class="line"><span class="comment">//src的特性： 不存在跨域问题，src连接可以无限制的跨域，不受浏览器同源策略限制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createScript = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scriptTag = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个回调函数(必须的),与后台返回请求数据做处理</span></span><br><span class="line"></span><br><span class="line">scriptTag.<span class="property">src</span> = <span class="string">&#x27;http://localhost:8080/test/get/?callback=headle&#x27;</span>; </span><br><span class="line">scriptTag.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(scriptTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> createScript;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> headle = <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonpCallback</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> response = <span class="title function_">headle</span>();    <span class="comment">//获取跨域请求返回的数据</span></span><br></pre></td></tr></table></figure><h3 id="http常见的状态码"><a href="#http常见的状态码" class="headerlink" title="http常见的状态码"></a>http常见的状态码</h3><p>101: 切换协议，服务器根据客户端请求切换协议</p><p><strong>200: 请求成功。一般用于GET和POST请求</strong></p><p><strong>301: 永久重定向</strong></p><p><strong>302: 临时重定向</strong></p><p>303: 与301类似。使用GET和POST请求查看</p><p><strong>304: 请求资源未修改，使用缓存</strong></p><p>307: 与302类似。使用GET请求重定向</p><p><strong>404: 客户端请求失败</strong></p><p>408: 请求超时</p><p><strong>500: 内部服务器错误，无法完成请求</strong></p><p>505: 服务器不支持请求的HTTP协议的版本，无法完成处理</p><h3 id="HTTP请求头信息"><a href="#HTTP请求头信息" class="headerlink" title="HTTP请求头信息"></a>HTTP请求头信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Accept</span>: 客户端支持的数据类型</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Charset</span>: 客户端采用的编码</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Encoding</span>: 客户端支持的数据压缩格式</span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: 客户端的语言环境</span><br><span class="line"><span class="title class_">Cookie</span>: 客户端的cookie</span><br><span class="line"><span class="title class_">Host</span>: 请求的服务器地址</span><br><span class="line"><span class="title class_">Contention</span>: 客户端与服务端连接类型</span><br><span class="line"><span class="title class_">If</span>-<span class="title class_">Modified</span>-<span class="title class_">Since</span>: 上一次请求资源的缓存时间，与<span class="title class_">Last</span>-<span class="title class_">Modified</span>对应</span><br><span class="line"><span class="title class_">If</span>-<span class="title class_">None</span>-<span class="title class_">Match</span>: 客户端缓存数据的唯一标识，与<span class="title class_">Etag</span>对应</span><br><span class="line"><span class="title class_">Referer</span>: 发起请求的源地址</span><br></pre></td></tr></table></figure><h3 id="HTTP的响应头信息"><a href="#HTTP的响应头信息" class="headerlink" title="HTTP的响应头信息"></a>HTTP的响应头信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">content-<span class="attr">encoding</span>: 响应数据的压缩格式</span><br><span class="line">content-<span class="attr">length</span>: 响应数据的长度</span><br><span class="line">content-<span class="attr">language</span>: 语言环境</span><br><span class="line">content-<span class="attr">type</span>: 响应数据的类型</span><br><span class="line"><span class="title class_">Date</span>: 消息发送的时间</span><br><span class="line"><span class="title class_">Age</span>: 经过的时间</span><br><span class="line"><span class="title class_">Etag</span>: 被请求变量的实体值，用于判断请求资源是否发生变化</span><br><span class="line"><span class="title class_">Expires</span>: 缓存的过期时间</span><br><span class="line"><span class="title class_">Last</span>-<span class="title class_">Modified</span>: 在服务器端最后被修改的时间</span><br><span class="line"><span class="attr">server</span>: 服务器的型号</span><br><span class="line"><span class="title class_">Pragma</span>: 是否缓存(http1<span class="number">.0</span>提出)</span><br><span class="line"><span class="title class_">Cache</span>-<span class="title class_">Control</span>：是否缓存(http1<span class="number">.1</span>提出)</span><br></pre></td></tr></table></figure><h4 id="与缓存相关的字段"><a href="#与缓存相关的字段" class="headerlink" title="与缓存相关的字段"></a>与缓存相关的字段</h4><ol><li>强缓存 expire 和 cache-control</li><li>对比缓存 Last-Mondified 和 If-Modified-Since Etag 和 If-None-Match</li></ol><h3 id="Ajax的优缺点："><a href="#Ajax的优缺点：" class="headerlink" title="Ajax的优缺点："></a>Ajax的优缺点：</h3><blockquote><ol><li>优点：</li></ol></blockquote><ul><li>页面无刷新，在页面内与服务器通信，减少用户等待时间，增强了用户体验。</li><li>使用异步方式与服务器通信，响应速度更快。</li><li>可以把一些原本服务器的工作转接到客户端，利用客户端闲置的能力来处理，减轻了服务器和宽带的负担，节约空间和宽带租用成本。</li><li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</li></ul><blockquote><ol><li>缺点：</li></ol></blockquote><ul><li>无法进行操作的后腿，既不支持浏览器的页面后退。</li><li>对搜索引擎的支持比较弱。</li><li>可能会影响程序中的异常处理机制。</li><li>安全问题，对一些网站攻击，如scrf、xxs、sql注入等不能很好的防御。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;p&gt;Ajax(Asynchronous JavaScript and XML),是一种在无需重新加载整个网页的情况下，能够更新部</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/tags/js/"/>
    
    <category term="ajax" scheme="https://lidengkedev.github.io/books/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>示例</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/example/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/example/</id>
    <published>2022-07-01T11:01:15.000Z</published>
    <updated>2022-07-01T11:33:47.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h2><blockquote><p>js实现保存HTML到本地</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fake_click</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ev = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&quot;MouseEvents&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ev.<span class="title function_">initMouseEvent</span>(</span><br><span class="line">        <span class="string">&quot;click&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="variable language_">window</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        , <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    obj.<span class="title function_">dispatchEvent</span>(ev);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">export_raw</span>(<span class="params">name, data</span>) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> urlObject = <span class="variable language_">window</span>.<span class="property">URL</span> || <span class="variable language_">window</span>.<span class="property">webkitURL</span> || <span class="variable language_">window</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">var</span> export_blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([data]);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">var</span> save_link = <span class="variable language_">document</span>.<span class="title function_">createElementNS</span>(<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">   save_link.<span class="property">href</span> = urlObject.<span class="title function_">createObjectURL</span>(export_blob);</span><br><span class="line"></span><br><span class="line">   save_link.<span class="property">download</span> = name;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">fake_click</span>(save_link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">link.<span class="property">innerText</span> = <span class="string">&#x27;保存HTML到本地&#x27;</span>;</span><br><span class="line"></span><br><span class="line">link.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">export_raw</span>(<span class="string">&#x27;index.html&#x27;</span>, test);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">link.<span class="title function_">clik</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;h2 id=&quot;小例子&quot;&gt;&lt;a href=&quot;#小例子&quot; class=&quot;headerlink&quot; title=&quot;小例子&quot;&gt;&lt;/a&gt;小例子&lt;/h2&gt;&lt;b</summary>
      
    
    
    
    <category term="example" scheme="https://lidengkedev.github.io/books/categories/example/"/>
    
    
    <category term="example" scheme="https://lidengkedev.github.io/books/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/es6/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/es6/</id>
    <published>2022-07-01T10:59:10.000Z</published>
    <updated>2022-07-01T11:33:59.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>includes 可以识别 NaN , undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="title class_">NaN</span>].<span class="title function_">includes</span>() == <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line">[<span class="literal">undefined</span>].<span class="title function_">includes</span>() == <span class="literal">true</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="js" scheme="https://lidengkedev.github.io/books/categories/js/"/>
    
    
    <category term="es6" scheme="https://lidengkedev.github.io/books/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>GIT</title>
    <link href="https://lidengkedev.github.io/books/2022/07/01/git/"/>
    <id>https://lidengkedev.github.io/books/2022/07/01/git/</id>
    <published>2022-07-01T10:56:58.000Z</published>
    <updated>2022-07-01T11:33:26.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . 添加暂存文件</span><br><span class="line">git reset xx.js 回退添加的暂存文件</span><br><span class="line">git reset HEAD 回退到上个版本之前所有添加的暂存文件</span><br></pre></td></tr></table></figure><blockquote><p>git 常用命令</p></blockquote><table>    <thead>        <tr>            <td colspan="2" style="width: 300px; text-align: center;">git命令</td>            <td>描述</td>        </tr>    </thead>    <tbody>        <tr>            <td rowspan="2">add</td>            <td>git add xxx.html</td>            <td>添加xxx文件到暂存区</td>        </tr>        <tr>            <td>git add .</td>            <td>添加全部文件到暂存区</td>        </tr>        <tr>            <td>commit</td>            <td>git commit -m "xxx"</td>            <td>提交到本地仓库</td>        </tr>        <tr>            <td rowspan="2">push</td>            <td>git push origin master</td>            <td>推送xxx到远程主仓库</td>        </tr>        <tr>            <td>git push origin --delete xxx</td>            <td>删除远程仓库xxx分支</td>        </tr>        <tr>            <td>pull</td>            <td>git pull origin master</td>            <td>拉取远程主仓库代码</td>        </tr>        <tr>            <td>clone</td>            <td>git clone http://xxx.git</td>            <td>克隆xxx远程仓库到本地</td>        </tr>        <tr>            <td>log</td>            <td>git log</td>            <td>查看提交记录</td>        </tr>        <tr>            <td rowspan="7">stash</td>            <td>git stash</td>            <td>保存所有修改到缓存区</td>        </tr>        <tr>            <td>git stash save "xxx"</td>            <td>保存所有修改到缓存区并添加保存信息</td>        </tr>        <tr>            <td>git stash list</td>            <td>查看缓存区缓存的列表</td>        </tr>        <tr>            <td>git stash pop</td>            <td>从缓存区中提取缓存内容到当前工作区</td>        </tr>        <tr>            <td>git stash pop stash@{x}</td>            <td>从缓存区中提取第x项缓存内容到当前工作区</td>        </tr>        <tr>            <td>git stash clear</td>            <td>清除缓存区所有内容</td>        </tr>        <tr>            <td>git stash drop stash@{x}</td>            <td>删除缓存区中第x项缓存内容</td>        </tr>        <tr>            <td rowspan="3">reset</td>            <td>git reset --hard xxx</td>            <td>回退提交到本地仓库的xxx版本</td>        </tr>        <tr>            <td>git reset xx.html</td>            <td>回退添加到暂存区的xx.html文件</td>        </tr>        <tr>            <td>git reset HEAD</td>            <td>回退到上个版本之前所有添加的暂存文件</td>        </tr>        <tr>            <td rowspan="2">checkout</td>            <td>git checkout xxx</td>            <td>切换到xxx分支</td>        </tr>        <tr>            <td>git checkout -b xxx</td>            <td>新建xxx分支</td>        </tr>        <tr>            <td rowspan="4">branch</td>            <td>git branch</td>            <td>查看本地分支</td>        </tr>        <tr>            <td>git branch -a</td>            <td>查看所有分支</td>        </tr>        <tr>            <td>git branch -d xxx</td>            <td>删除xxx分支</td>        </tr>        <tr>            <td>git branch -D xxx</td>            <td>强删除xxx分支</td>        </tr>        <tr>            <td>merge</td>            <td>git merge xxx</td>            <td>xxx分支内容合并到当前分支</td>        </tr>        <tr>            <td rowspan="5">diff</td>            <td>git diff</td>            <td>查看所有本地改动与仓库的差异</td>        </tr>        <tr>            <td>git diff xxx.html</td>            <td>查看本地指定文件与本地仓库的差异</td>        </tr>        <tr>            <td>git diff master dev</td>            <td>查看master分支与dev分支的所有差异</td>        </tr>        <tr>            <td>git diff master dev --stat</td>            <td>查看master分支与dev分支所有差异的文件列表</td>        </tr>        <tr>            <td>git diff master dev xxx.html</td>            <td>查看指定文件xxx.html在master分支与dev分支上的差异</td>        </tr>    </tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="git" scheme="https://lidengkedev.github.io/books/categories/git/"/>
    
    
    <category term="git" scheme="https://lidengkedev.github.io/books/tags/git/"/>
    
  </entry>
  
</feed>
